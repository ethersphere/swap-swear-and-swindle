{
  "address": "0xA57A50a831B31c904A770edBCb706E03afCdbd94",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chequeValueDeduction",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chequeValueDeduction",
          "type": "uint256"
        }
      ],
      "name": "ChequeValueDeductionUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chequeValueDeduction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newChequeValueDeduction",
          "type": "uint256"
        }
      ],
      "name": "updateChequeValueDeduction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc69cb2149c9c96e0eca4c14eb3614619370336fcc28c24a5390489f383a2cbf5",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0xA57A50a831B31c904A770edBCb706E03afCdbd94",
    "transactionIndex": 0,
    "gasUsed": "311866",
    "logsBloom": "0x
    "blockHash": "0xcce1168f478776c12fcb85e00aa9510284c13f322ff93fe7915cd6e55dfb9297",
    "transactionHash": "0xc69cb2149c9c96e0eca4c14eb3614619370336fcc28c24a5390489f383a2cbf5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 39939970,
        "transactionHash": "0xc69cb2149c9c96e0eca4c14eb3614619370336fcc28c24a5390489f383a2cbf5",
        "address": "0xA57A50a831B31c904A770edBCb706E03afCdbd94",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1c7f17ed88189abf269bf68a3b2ed83c5276aae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcce1168f478776c12fcb85e00aa9510284c13f322ff93fe7915cd6e55dfb9297"
      }
    ],
    "blockNumber": 39939970,
    "cumulativeGasUsed": "311866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100000,
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "6895f583f1c977a400e065a7b8abf0a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chequeValueDeduction\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chequeValueDeduction\",\"type\":\"uint256\"}],\"name\":\"ChequeValueDeductionUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chequeValueDeduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChequeValueDeduction\",\"type\":\"uint256\"}],\"name\":\"updateChequeValueDeduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Swarm Authors\",\"details\":\"The price oracle contract keeps track of the current prices for settlement in swap accounting.\",\"events\":{\"ChequeValueDeductionUpdate(uint256)\":{\"details\":\"Emitted when the cheque value deduction amount is updated.\"},\"PriceUpdate(uint256)\":{\"details\":\"Emitted when the price is updated.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateChequeValueDeduction(uint256)\":{\"params\":{\"newChequeValueDeduction\":\"the new cheque value deduction amount\"}},\"updatePrice(uint256)\":{\"params\":{\"newPrice\":\"the new price\"}}},\"title\":\"PriceOracle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice()\":{\"notice\":\"Returns the current price in PLUR per accounting unit and the current cheque value deduction amount.\"},\"updateChequeValueDeduction(uint256)\":{\"notice\":\"Update the cheque value deduction amount. Can only be called by the owner.\"},\"updatePrice(uint256)\":{\"notice\":\"Update the price. Can only be called by the owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.4;\\nimport \\\"./access/Ownable.sol\\\";\\n\\n/**\\n * @title PriceOracle contract\\n * @author The Swarm Authors\\n * @dev The price oracle contract keeps track of the current prices for settlement in swap accounting.\\n */\\ncontract PriceOracle is Ownable {\\n    /**\\n     * @dev Emitted when the price is updated.\\n     */\\n    event PriceUpdate(uint256 price);\\n    /**\\n     * @dev Emitted when the cheque value deduction amount is updated.\\n     */\\n    event ChequeValueDeductionUpdate(uint256 chequeValueDeduction);\\n\\n    // current price in PLUR per accounting unit\\n    uint256 public price;\\n    // value deducted from first received cheque from a peer in PLUR\\n    uint256 public chequeValueDeduction;\\n\\n    constructor(uint256 _price, uint256 _chequeValueDeduction) {\\n        price = _price;\\n        chequeValueDeduction = _chequeValueDeduction;\\n    }\\n\\n    /**\\n     * @notice Returns the current price in PLUR per accounting unit and the current cheque value deduction amount.\\n     */\\n    function getPrice() external view returns (uint256, uint256) {\\n        return (price, chequeValueDeduction);\\n    }\\n\\n    /**\\n     * @notice Update the price. Can only be called by the owner.\\n     * @param newPrice the new price\\n     */\\n    function updatePrice(uint256 newPrice) external onlyOwner {\\n        price = newPrice;\\n        emit PriceUpdate(price);\\n    }\\n\\n    /**\\n     * @notice Update the cheque value deduction amount. Can only be called by the owner.\\n     * @param newChequeValueDeduction the new cheque value deduction amount\\n     */\\n    function updateChequeValueDeduction(uint256 newChequeValueDeduction) external onlyOwner {\\n        chequeValueDeduction = newChequeValueDeduction;\\n        emit ChequeValueDeductionUpdate(chequeValueDeduction);\\n    }\\n}\\n\",\"keccak256\":\"0x66bdab39f6676f1925faf64877c11bb97f45a1bc0578e8d94c88440ca5253c4d\",\"license\":\"BSD-3-Clause\"},\"contracts/access/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c03cdb0bdf0104db4f87451fc7dd8fb4f94f06dbf176dfc06fd616c1b5937e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161042c38038061042c83398101604081905261002f91610096565b61003833610046565b6001919091556002556100b9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100a8578182fd5b505080516020909101519092909150565b610364806100c86000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806398d5fdca1161005b57806398d5fdca146100dd578063a035b1fe146100f8578063dd4899321461010f578063f2fde38b1461011857600080fd5b8063710f2dd11461008d578063715018a6146100a25780638d6cc56d146100aa5780638da5cb5b146100bd575b600080fd5b6100a061009b366004610316565b61012b565b005b6100a061016f565b6100a06100b8366004610316565b610183565b6000546040516001600160a01b0390911681526020015b60405180910390f35b600154600254604080519283526020830191909152016100d4565b61010160015481565b6040519081526020016100d4565b61010160025481565b6100a06101263660046102e8565b6101c0565b61013361023e565b60028190556040518181527f0f45948e42a1e34f851df8452200e744563dae2029a99b8178ff6530458bd3df906020015b60405180910390a150565b61017761023e565b6101816000610298565b565b61018b61023e565b60018190556040518181527fae46785019700e30375a5d7b4f91e32f8060ef085111f896ebf889450aa2ab5a90602001610164565b6101c861023e565b6001600160a01b0381166102325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61023b81610298565b50565b6000546001600160a01b031633146101815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610229565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102f9578081fd5b81356001600160a01b038116811461030f578182fd5b9392505050565b600060208284031215610327578081fd5b503591905056fea2646970667358221220b53ab19139929871ea8501a5b52d9db990bcee1e6cef0453c91dd16afc7e56ad64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806398d5fdca1161005b57806398d5fdca146100dd578063a035b1fe146100f8578063dd4899321461010f578063f2fde38b1461011857600080fd5b8063710f2dd11461008d578063715018a6146100a25780638d6cc56d146100aa5780638da5cb5b146100bd575b600080fd5b6100a061009b366004610316565b61012b565b005b6100a061016f565b6100a06100b8366004610316565b610183565b6000546040516001600160a01b0390911681526020015b60405180910390f35b600154600254604080519283526020830191909152016100d4565b61010160015481565b6040519081526020016100d4565b61010160025481565b6100a06101263660046102e8565b6101c0565b61013361023e565b60028190556040518181527f0f45948e42a1e34f851df8452200e744563dae2029a99b8178ff6530458bd3df906020015b60405180910390a150565b61017761023e565b6101816000610298565b565b61018b61023e565b60018190556040518181527fae46785019700e30375a5d7b4f91e32f8060ef085111f896ebf889450aa2ab5a90602001610164565b6101c861023e565b6001600160a01b0381166102325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61023b81610298565b50565b6000546001600160a01b031633146101815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610229565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102f9578081fd5b81356001600160a01b038116811461030f578182fd5b9392505050565b600060208284031215610327578081fd5b503591905056fea2646970667358221220b53ab19139929871ea8501a5b52d9db990bcee1e6cef0453c91dd16afc7e56ad64736f6c63430008040033",
  "devdoc": {
    "author": "The Swarm Authors",
    "details": "The price oracle contract keeps track of the current prices for settlement in swap accounting.",
    "events": {
      "ChequeValueDeductionUpdate(uint256)": {
        "details": "Emitted when the cheque value deduction amount is updated."
      },
      "PriceUpdate(uint256)": {
        "details": "Emitted when the price is updated."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateChequeValueDeduction(uint256)": {
        "params": {
          "newChequeValueDeduction": "the new cheque value deduction amount"
        }
      },
      "updatePrice(uint256)": {
        "params": {
          "newPrice": "the new price"
        }
      }
    },
    "title": "PriceOracle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice()": {
        "notice": "Returns the current price in PLUR per accounting unit and the current cheque value deduction amount."
      },
      "updateChequeValueDeduction(uint256)": {
        "notice": "Update the cheque value deduction amount. Can only be called by the owner."
      },
      "updatePrice(uint256)": {
        "notice": "Update the price. Can only be called by the owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 113,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "chequeValueDeduction",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}